package org.jsn.com.views.dialogues;

import java.awt.Component;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

import org.eclipse.wb.swing.FocusTraversalOnArray;
import org.jsn.com.dao.UserDao;
import org.jsn.com.entity.UserEntity;
import org.jsn.com.validator.AbstractValidator;
import org.jsn.com.validator.WantsValidationStatus;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author BalajiGold
 */
public class JSNLogInForm extends JDialog {

	private static final String PASS_WORD = "passWord";
	private static final String USER_NAME = "userName";
	private UserDao dao;
	private Map<String, Boolean> validationMap = new HashMap<>();

	private UserEntity userEntity;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton signInButton;

	private javax.swing.JLabel jLabel1;

	private javax.swing.JLabel jLabel2;

	private javax.swing.JLabel jLabel3;
	private javax.swing.JPasswordField passwordPassWordField;
	private javax.swing.JTextField userNameTextField;

	// End of variables declaration//GEN-END:variables
	/**
	 * Creates new form JSNLogInForm
	 */
	public JSNLogInForm(Frame owner, UserDao dao) {
		super(owner);
		this.setType(Type.POPUP);
		this.setModalityType(ModalityType.DOCUMENT_MODAL);
		this.initComponents();
		this.dao = dao;
	}

	public UserEntity getUserEntity() {
		return this.userEntity;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		try {
			for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (Exception e) {
			// If Nimbus is not available, you can set the GUI to another look and feel.
		}
		this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		this.setTitle("Log In");
		this.setBackground(new java.awt.Color(153, 255, 255));
		this.setLocationByPlatform(true);
		this.setResizable(false);
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[] { 30, 104, 150, 45 };
		gridBagLayout.rowHeights = new int[] { 30, 27, 33, 33, 23 };
		gridBagLayout.columnWeights = new double[] { 0.0, 0.0, 1.0 };
		gridBagLayout.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0 };
		this.getContentPane().setLayout(gridBagLayout);
		this.jLabel3 = new javax.swing.JLabel();

		this.jLabel3.setBackground(new java.awt.Color(204, 0, 0));
		this.jLabel3.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
		this.jLabel3.setText("Please Log In Or Sign Up to Continue");
		this.jLabel3.setToolTipText("");
		GridBagConstraints gbc_jLabel3 = new GridBagConstraints();
		gbc_jLabel3.insets = new Insets(0, 0, 5, 0);
		gbc_jLabel3.gridwidth = 2;
		gbc_jLabel3.gridx = 1;
		gbc_jLabel3.gridy = 1;
		this.getContentPane().add(this.jLabel3, gbc_jLabel3);
		this.jLabel1 = new javax.swing.JLabel();

		this.jLabel1.setText("UserName");
		GridBagConstraints gbc_jLabel1 = new GridBagConstraints();
		gbc_jLabel1.insets = new Insets(0, 0, 5, 5);
		gbc_jLabel1.gridx = 1;
		gbc_jLabel1.gridy = 2;
		this.getContentPane().add(this.jLabel1, gbc_jLabel1);

		this.userNameTextField = new javax.swing.JTextField();
		GridBagConstraints gbc_userNameTextField = new GridBagConstraints();
		gbc_userNameTextField.fill = GridBagConstraints.BOTH;
		gbc_userNameTextField.insets = new Insets(0, 0, 5, 0);
		gbc_userNameTextField.gridx = 2;
		gbc_userNameTextField.gridy = 2;
		this.getContentPane().add(this.userNameTextField, gbc_userNameTextField);
		this.jLabel2 = new javax.swing.JLabel();

		this.jLabel2.setText("Password");
		GridBagConstraints gbc_jLabel2 = new GridBagConstraints();
		gbc_jLabel2.insets = new Insets(0, 0, 5, 5);
		gbc_jLabel2.gridx = 1;
		gbc_jLabel2.gridy = 3;
		this.getContentPane().add(this.jLabel2, gbc_jLabel2);
		this.passwordPassWordField = new javax.swing.JPasswordField();
		GridBagConstraints gbc_passwordPassWordField = new GridBagConstraints();
		gbc_passwordPassWordField.fill = GridBagConstraints.BOTH;
		gbc_passwordPassWordField.insets = new Insets(0, 0, 5, 0);
		gbc_passwordPassWordField.gridx = 2;
		gbc_passwordPassWordField.gridy = 3;
		this.getContentPane().add(this.passwordPassWordField, gbc_passwordPassWordField);
		this.signInButton = new javax.swing.JButton();
		this.signInButton.setEnabled(false);
		this.signInButton.addActionListener(e -> {
			this.userEntity = this.dao.authernticateUser(this.userNameTextField.getText(),
					new String(this.passwordPassWordField.getPassword()));
			if (Objects.isNull(this.userEntity)) {
				JOptionPane.showMessageDialog(this, "Invalid Credentials", "Log in failed", JOptionPane.ERROR_MESSAGE);
			} else {
				this.setVisible(false);
			}
		});

		this.signInButton.setText("Sign In");
		GridBagConstraints gbc_jButton1 = new GridBagConstraints();
		gbc_jButton1.insets = new Insets(0, 0, 5, 0);
		gbc_jButton1.gridx = 2;
		gbc_jButton1.gridy = 4;
		this.getContentPane().add(this.signInButton, gbc_jButton1);
		this.getContentPane().setFocusTraversalPolicy(new FocusTraversalOnArray(new Component[] { this.jLabel1,
				this.userNameTextField, this.passwordPassWordField, this.jLabel2, this.jLabel3, this.signInButton }));

		this.pack();

		WantsValidationStatus userNameValidationStatus = new WantsValidationStatus() {

			@Override
			public void validateFailed() {
				JSNLogInForm.this.validationMap.put(USER_NAME, false);
				JSNLogInForm.this.signInButton.setEnabled(false);
			}

			@Override
			public void validatePassed() {
				JSNLogInForm.this.validationMap.put(USER_NAME, true);
				if (JSNLogInForm.this.validationMap.containsKey(PASS_WORD)
						&& JSNLogInForm.this.validationMap.get(PASS_WORD)) {
					JSNLogInForm.this.signInButton.setEnabled(true);
				}
			}
		};
		new AbstractValidator(this, this.userNameTextField, "UserName Cannot be Empty", userNameValidationStatus) {

			@Override
			protected boolean validationCriteria(JComponent c) {
				if (JSNLogInForm.this.userNameTextField.getText().isEmpty()) {
					return false;
				} else {
					return true;
				}
			}
		};

		WantsValidationStatus passwordValidationStatus = new WantsValidationStatus() {

			@Override
			public void validateFailed() {
				JSNLogInForm.this.validationMap.put(PASS_WORD, false);
				JSNLogInForm.this.signInButton.setEnabled(false);
			}

			@Override
			public void validatePassed() {
				JSNLogInForm.this.validationMap.put(PASS_WORD, true);
				if (JSNLogInForm.this.validationMap.containsKey(USER_NAME)
						&& JSNLogInForm.this.validationMap.get(USER_NAME)) {
					JSNLogInForm.this.signInButton.setEnabled(true);
				}
			}
		};
		new AbstractValidator(this, this.passwordPassWordField, "Password Cannot be Empty", passwordValidationStatus) {

			@Override
			protected boolean validationCriteria(JComponent c) {
				if (new String(JSNLogInForm.this.passwordPassWordField.getPassword()).isEmpty()) {
					return false;
				} else {
					return true;
				}
			}
		};

	}// </editor-fold>//GEN-END:initComponents
}
